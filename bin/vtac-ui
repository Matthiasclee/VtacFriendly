#!/usr/bin/env ruby

require_relative "../lib/vtac_friendly.rb"
require "argparse"
require "io/console"

switches = {
  p: { has_argument: true },
}
options = {}

args = ArgsParser::Args.new(switches: switches, options: options)

# Connect to client

srv = VtacFriendly::Client.connect(args.data[0], args.switches[:p] ? args.switches[:p].to_i : 5582)
server = srv[0]
server_name = srv[1]
sock_domain, remote_port, remote_hostname, remote_ip = server.peeraddr

bb = (R::C.color :blue) + (R::F.bold)
rb = R::F.reset(R::F.bold) + (R::C.color :reset)

ctab = :analytics

R::Cr.hide

loop do
  R::S.clear
  R::Cr.go_to_pos(0,0)
  puts "Connected to #{server_name}@#{remote_ip}"
  
  if ctab == :analytics
    puts "_.f:bold.__.cb:black._Analytics_.f:reset.__.cb:gray._ConfigSystem".to_ftext
    VtacFriendly::AnalyticsTab.show server

    R::Cr.go_to_pos(0, R::S.height)
    R::C.color :gray, type: :bg, mode: :set
    print "#{bb}H#{rb} Tab left #{bb}L#{rb} Tab right #{bb}R#{rb} Reset analytics"
    print " "*(R::S.width-R::Cr.pos[0])
  elsif ctab == :config
    puts "_.cb:gray._Analytics_.f:bold.__.cb:black._Config_.f:reset.__.cb:gray._System".to_ftext
    VtacFriendly::ConfigTab.show server

    R::Cr.go_to_pos(0, R::S.height)
    R::C.color :gray, type: :bg, mode: :set
    print "#{bb}H#{rb} Tab left #{bb}L#{rb} Tab right #{bb}P#{rb} Change pxsize #{bb}R#{rb} Change room length #{bb}M#{rb} Toggle mirroring"
    print " "*(R::S.width-R::Cr.pos[0])
  elsif ctab == :system
    puts "_.cb:gray._AnalyticsConfig_.f:bold.__.cb:black._System".to_ftext
    VtacFriendly::SystemTab.show remote_ip, server_name

    R::Cr.go_to_pos(0, R::S.height)
    R::C.color :gray, type: :bg, mode: :set
    print "#{bb}H#{rb} Tab left #{bb}L#{rb} Tab right #{bb}S#{rb} Shut down #{bb}R#{rb} Reboot #{bb}U#{rb} Update"
    print " "*(R::S.width-R::Cr.pos[0])
  end

  R::F.reset mode: :set
  char = STDIN.getch

  if char.upcase == "L" && ctab == :analytics
    ctab = :config
  elsif char.upcase == "H" && ctab == :config
    ctab = :analytics
  elsif char.upcase == "L" && ctab == :config
    ctab = :system
  elsif char.upcase == "H" && ctab == :system
    ctab = :config
  end

  if char.upcase == "P" && ctab == :config
    VtacFriendly::ConfigTab.change_pxsize(server)
  end
  if char.upcase == "R" && ctab == :config
    VtacFriendly::ConfigTab.change_roomlength(server)
  end
  if char.upcase == "M" && ctab == :config
    VtacFriendly::ConfigTab.toggle_mirroring(server)
  end

  if char.upcase == "R" && ctab == :analytics
    VtacFriendly::AnalyticsTab.reset(server)
  end

  if char.upcase == "S" && ctab == :system
    VtacFriendly::SystemTab.shutdown(server)
  end

  if char.upcase == "R" && ctab == :system
    VtacFriendly::SystemTab.reboot(server)
  end

  if char.upcase == "U" && ctab == :system
    VtacFriendly::SystemTab.update(server)
  end

  if char == "\x03"
    R::Cr.show
    R::S.clear
    R::Cr.go_to_pos(0,0)
    exit
  end
end
